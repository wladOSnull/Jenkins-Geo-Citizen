def ip_server, ip_db, vari

pipeline {
    
    agent any

    environment {
        PATH = "/opt/maven/bin:$PATH"
    }

    stages {
    
        stage ('Clean current workspace') {
            steps {
                slackSend color: 'good', message: "> *Start pipeline*: ${BUILD_TAG}"
                // remove/reset current workspace directory
                deleteDir()
            }
        }

        stage ('Checkout Geo Citizen project') {
            steps {

                slackSend color: 'good', message: "Geo-project checkout"                
                script {
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[
                            name: '*/main'
                        ]], 
                        extensions: [], 
                        userRemoteConfigs: [[
                            url: 'https://github.com/wladOSnull/Geocit134/'
                        ]]
                    ])
                
                    properties([
                        pipelineTriggers([
                            githubPush()
                        ])
                    ])
                }

            }
        }

        stage('Get IP of instances') {
            steps {
                slackSend color: 'good', message: "Get new IPs"                
                script {
                    //ip_server = sh(returnStdout: true, script: "gcloud compute instances list --format='value(networkInterfaces.accessConfigs.natIP)' --filter=name:server --zones=us-central1-a | awk -F[\\'\\'] '{print \$2}'").trim()
                    ip_server = sh(returnStdout: true, script: "gcloud compute forwarding-rules describe server-frontend-http --global --format='value(IPAddress)'").trim()

                    //ip_db = sh(returnStdout: true, script: "gcloud compute instances list --format='value(networkInterfaces.networkIP)' --filter=name:db --zones=us-central1-a").trim()
                    ip_db = sh(returnStdout: true, script: "gcloud compute instances list --format='value(networkInterfaces.networkIP)' --filter=labels.instance_type:db --zones=us-central1-a").trim()
                }
            }
        }
        
        stage('Project fixing / configuration') {
            steps {

                slackSend color: 'warning', message: "Geo-project fixing ..."         

                withCredentials([usernamePassword(credentialsId: 'bdfa4956-ceb7-4c72-a011-cb649446e915', passwordVariable: 'email_pass', usernameVariable: 'email_login')]) {

                    withEnv(["server=$ip_server", "db=$ip_db"]) {

                        sh '''#!/bin/bash

                        ### variables
                        ##################################################

                        G_SERVER_IP=${server}
                        G_DB_IP=${db}

                        G_DB_USERNAME="geocitizen"
                        G_DB_PASSWORD="weakpass"

                        G_EMAIL_ADDRESS=${email_login}
                        G_EMAIL_PASSWORD=${email_pass}

                        ### fixing dependencies and packets in \'pom.xml\'
                        ##################################################

                        echo -e "\\n#####\\nSmall errors fixing\\n#####\\n"

                        ### \'javax\' missing
                        sed -i "s/>servlet-api/>javax.servlet-api/g" "pom.xml"

                        ### https for 2 repo
                        sed -i -E "s/(http:\\/\\/repo.spring)/https:\\/\\/repo.spring/g" "pom.xml"

                        ### redundant nexus repos
                        #sed -i "/<distributionManagement>/,/<\\/distributionManagement>/d" pom.xml

                        ### missing version of maven war plugin
                        printf \'%s\\n\' \'0?<artifactId>maven-war-plugin<\\/artifactId>?a\' \'                <version>3.3.2</version>\' . x | ex "pom.xml"

                        ### missing \'validator\' attribute
                        sed -i -E \':a;N;$!ba; s/org.hibernate/org.hibernate.validator/2\' "pom.xml"

                        ### remove duplicates
                        ##################################################

                        echo -e "#####\\nDuplicates removing\\n#####\\n"

                        ### function for deleting xml block with specified string
                        function XML_OBJECT_REMOVE()
                        {
                            ### $1 - UP TO
                            ### $2 - DOWN TO
                            echo -e "${1} ---------- ${2}\\n"

                            ### $3 - line pointer
                            POINTER=$3

                            ### delete duplicate TOP
                            EDGE=true
                            while [ "$EDGE" = true ]; do

                                if ! [[ "$DUPLICATE_LINE" == "${1}" ]]; then
                                    sed -i "${POINTER}d" pom.xml

                                    ((POINTER--))
                                    DUPLICATE_LINE=`sed -n "${POINTER}p" < pom.xml`
                                    DUPLICATE_LINE=`echo $DUPLICATE_LINE | sed \'s/ *$//g\'`
                                else
                                    EDGE=false
                                    sed -i "${POINTER}d" pom.xml
                                fi

                            done

                            ### delete duplicate DOWN
                            EDGE=true
                            while [ "$EDGE" = true ]; do

                                if ! [[ "$DUPLICATE_LINE" == "${2}" ]]; then
                                    sed -i "${POINTER}d" pom.xml

                                    DUPLICATE_LINE=`sed -n "${POINTER}p" < pom.xml`
                                    DUPLICATE_LINE=`echo $DUPLICATE_LINE | sed \'s/ *$//g\'`
                                else
                                    EDGE=false
                                    sed -i "${POINTER}d" pom.xml
                                fi

                            done
                        }

                        ### get the duplicate of maven war plugin
                        DUPLICATE_NUMBER=`grep -n -m1 \'maven-war\' pom.xml | cut -f1 -d:`
                        DUPLICATE_LINE=`sed -n "${DUPLICATE_NUMBER}p" < pom.xml`
                        DUPLICATE_LINE=`echo $DUPLICATE_LINE | sed \'s/ *$//g\'`
                        TOP="<plugin>"
                        DOWN="</plugin>"

                        ### remove it
                        XML_OBJECT_REMOVE $TOP $DOWN $DUPLICATE_NUMBER

                        ### get the duplicate of postgresql plugin
                        DUPLICATE_NUMBER=`grep -n "org.postgresql" pom.xml | sed -n 2p | cut -f1 -d:`
                        DUPLICATE_LINE=`sed -n "${DUPLICATE_NUMBER}p" < pom.xml`
                        DUPLICATE_LINE=`echo $DUPLICATE_LINE | sed \'s/ *$//g\'`
                        TOP="<dependency>"
                        DOWN="</dependency>"

                        ### remove it
                        XML_OBJECT_REMOVE $TOP $DOWN $DUPLICATE_NUMBER

                        ### fixing front-end
                        ##################################################

                        echo -e "#####\\nFront-end fixing\\n#####\\n"

                        ### wrong path to favicon.ico
                        sed -i \'s/\\/src\\/assets/.\\/static/g\' src/main/webapp/"index.html"

                        ### wrong back-end in minificated .js files
                        find ./src/main/webapp/static/js/ -type f -exec sed -i "s/localhost/${G_SERVER_IP}/g" {} +

                        ### fixing properties of the project deployment
                        ##################################################

                        sed -i -E \\
                                    "s/(front.url=http:\\/\\/localhost)/front.url=http:\\/\\/${G_SERVER_IP}/g; \\
                                    s/(front-end.url=http:\\/\\/localhost)/front-end.url=http:\\/\\/${G_SERVER_IP}/g; \\

                                    s/(db.url=jdbc:postgresql:\\/\\/localhost)/db.url=jdbc:postgresql:\\/\\/${G_DB_IP}/g;
                                    s/(db.username=postgres)/db.username=${G_DB_USERNAME}/g;
                                    s/(db.password=postgres)/db.password=${G_DB_PASSWORD}/g;

                                    s/(url=jdbc:postgresql:\\/\\/35.204.28.238)/url=jdbc:postgresql:\\/\\/${G_DB_IP}/g;
                                    s/(username=postgres)/username=${G_DB_USERNAME}/g;
                                    s/(password=postgres)/password=${G_DB_PASSWORD}/g;

                                    s/(referenceUrl=jdbc:postgresql:\\/\\/35.204.28.238)/referenceUrl=jdbc:postgresql:\\/\\/${G_DB_IP}/g;

                                    s/(email.username=ssgeocitizen@gmail.com)/email.username=${G_EMAIL_ADDRESS}/g;
                                    s/(email.password=softserve)/email.password=${G_EMAIL_PASSWORD}/g;" src/main/resources/application.properties
                        '''
                    }                    
                }
            }
        }        
        
        stage('Build Geo Citizen with Maven') {
            steps {
                slackSend color: 'good', message: "Geo-project build ..."
                sh("mvn clean install")
            }
        }

        stage('Deploy Geo Citizen with Maven (pom.xml) to Nexus') {
            steps {
                slackSend color: 'good', message: "Geo-project deploy to Nexus ..."
                sh("mvn deploy")
            }
        }

        stage('Slack final message') {
            steps {
                slackSend color: 'good', message: "${currentBuild.durationString}"
                slackSend color: 'good', message: "${currentBuild.currentResult}"                
                slackSend color: 'good', message: "> *End pipeline*"
            }
        }         

    }
}


