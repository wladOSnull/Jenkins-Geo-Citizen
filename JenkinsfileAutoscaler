pipeline {
    
    agent any

    environment {        
        registryCreds = "7f3b1543-24a9-4e22-8690-2b4329038ac2"
        registry = "35.223.40.57:8085/"
        sensu_backend_url = "35.226.240.92:8091"
    }    

    stages {

        stage ('Clean current workspace') {
            steps {
                slackSend color: 'good', message: "> *Start pipeline*: ${BUILD_TAG}"                
                // remove/reset current workspace directory
                deleteDir()
            }
        }

        stage ('New server configuring') {

            steps {
                slackSend color: 'warning', message: "Geo-server configuring ..."                  
                ansibleTower(
                    extraVars: '''---
                    var_host: ${host}
                    sensu_backend: ${sensu_backend_url}''', 
                    jobTemplate: 'Geo Citizen server LB', 
                    jobType: 'run', 
                    throwExceptionWhenFail: false, 
                    towerCredentialsId: '', 
                    towerLogLevel: 'false', 
                    towerServer: 'Geo Citizen AWX'
                )
                
            }

        }
        
        /*
        stage('Pull Geo Ciizen .war file') {
            steps {
                withCredentials([usernamePassword(credentialsId: '1c43d44e-f7d4-4f31-9c9e-16b0e47650cc', passwordVariable: 'nexus_snap_pass', usernameVariable: 'nexus_snap_user')]) {
                    
                    slackSend color: 'good', message: "Get the latest geo-app"                      
                    // get the latest .war file
                    sh '''
                    curl -L  \
                    --output "citizen.war" \
                    --user "$nexus_snap_user:$nexus_snap_pass" \
                    "http://35.223.40.57:8081/service/rest/v1/search/assets/download?sort=version&direction=desc&repository=maven-snapshots&maven.groupId=com.softserveinc&maven.artifactId=geo-citizen&maven.baseVersion=1.0.5-SNAPSHOT&maven.extension=war"
                    '''
                }
                
            }
        }
*/
        stage('Pull the latest docker geo-image') {
            steps {

                withCredentials([usernamePassword(credentialsId: "${registryCreds}", passwordVariable: 'nexus_docker_pass', usernameVariable: 'nexus_docker_user')]) {
                    
                    script {
                        slackSend color: 'good', message: "Get the latest geo-app"                      

                        last_tag = sh(returnStdout: true, script: """curl --user '$nexus_docker_user:$nexus_docker_pass' -sX GET http://35.223.40.57:8085/v2/citizen/tags/list | jq '.tags[-1]' | awk -F[\\"\\"] '{print \$2}' """).trim()
                    }
                    echo last_tag
                }
                
                script {                    
                    docker.withRegistry("http://"+registry, registryCreds) {
                        sh("docker image pull ${registry}citizen:${last_tag}")
                    }
                }
                
                sh("docker save -o ./citizen.tar ${registry}citizen:${last_tag}")
                
            }
        }
        
        //stage ('Clean all images') {
        //    steps {
        //        sh("docker rmi -f \$(docker images '*/citizen' --format '{{.ID}}')")
        //    }
        //}       
        
        stage('Deploy geo-images to geo-server') {
            steps {
                sshagent(['7ff07c78-bb65-4451-ae74-a623933b38d3']) {
                    
                    script {
                        slackSend color: 'good', message: "Geo-app provisioning"                          
                        
                        //user = sh(returnStdout: true, script: "gcloud compute instances describe server --format='value(metadata.items.value)' --zone=us-central1-a | cut -f1 -d':'").trim()
                        def user = "wlad1324"
                            
                        // provide .war to server
                        sh ("scp -o StrictHostKeyChecking=no citizen.tar ${user}@${host}:/home/${user}")
                
                        // deploy .war file on Tomcat
                        sh ("ssh -o StrictHostKeyChecking=no ${user}@${host} 'sudo docker load < /home/${user}/citizen.tar'")
                        sh ("ssh -o StrictHostKeyChecking=no ${user}@${host} 'sudo docker run -d -p 8080:8080 ${registry}citizen:${last_tag}'")
                            
                    }
                }
            }
        }        

        stage('Slack final message') {
            steps {
                slackSend color: 'good', message: "${currentBuild.durationString}"
                slackSend color: 'good', message: "${currentBuild.currentResult}"                
                slackSend color: 'good', message: "> *End pipeline*"
            }
        }        
    }
}
